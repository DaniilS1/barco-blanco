const express = require("express");
const nodemailer = require("nodemailer");
const cors = require("cors");
const dotenv = require("dotenv");

dotenv.config();
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors({
    origin: "https://barcoblanco-dev.vercel.app"  // Ersetze durch deine Frontend-Domain
}));
app.use(express.json());

// SMTP-Konfiguration f√ºr Nodemailer
const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false,
    auth: {
        user: process.env.SMTP_USERNAME,
        pass: process.env.SMTP_PASSWORD,
    },
});

// API-Key √úberpr√ºfung Middleware
const checkApiKey = (req, res, next) => {
    const apiKey = req.headers["x-api-key"];
    if (!apiKey || apiKey !== process.env.API_KEY) {
        return res.status(403).json({ error: "Ung√ºltiger oder fehlender API-Key" });
    }
    next();
};

// E-Mail senden Funktion
const sendEmail = async (toEmail, subject, body) => {
    try {
        await transporter.sendMail({
            from: `"Barcoblanco" <${process.env.SMTP_USERNAME}>`,
            to: toEmail,
            subject: subject,
            text: body,
        });
    } catch (error) {
        console.error("Fehler beim Senden der E-Mail:", error);
        throw new Error("E-Mail konnte nicht gesendet werden.");
    }
};

// POST /api/send-order
app.post("/api/send-order", checkApiKey, async (req, res) => {
    const data = req.body;
    if (!data) {
        return res.status(400).json({ error: "No data received" });
    }

    try {
        const totalAmount = data.cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

        // E-Mail an den Kunden
        const customerMessage = `
            –ü—Ä–∏–≤—ñ—Ç ${data.fullName},

            –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –û—Å—å –π–æ–≥–æ –¥–µ—Ç–∞–ª—ñ:

            üë§ –ö–ª—ñ—î–Ω—Ç: ${data.fullName}
            üìç –ê–¥—Ä–µ—Å–∞: ${data.address}
            üèô –ú—ñ—Å—Ç–æ: ${data.city}
            üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: $${totalAmount}
            üõç –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
            ${JSON.stringify(data.cart, null, 2)}

            –ú–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
            –Ø–∫—â–æ —É –≤–∞—Å —î –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è.

            –ó –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏,
            –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ Barcoblanco
        `;
        await sendEmail(data.email, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", customerMessage);

        // E-Mail an den Manager
        const managerMessage = `
            üîî –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø üîî

            üë§ –ö–ª—ñ—î–Ω—Ç: ${data.fullName}
            üìß Email: ${data.email}
            üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
            üìç –ê–¥—Ä–µ—Å–∞: ${data.address}, ${data.city}
            üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: $${totalAmount}

            üõç –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
            ${JSON.stringify(data.cart, null, 2)}

            –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫–æ–º–æ–≥–∞ —à–≤–∏–¥—à–µ.
        `;
        await sendEmail(process.env.MANAGER_EMAIL, "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ", managerMessage);

        res.status(200).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –ª–∏—Å—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ" });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Fehler beim Verarbeiten der Bestellung" });
    }
});

// GET /api/test
app.get("/api/test", (req, res) => {
    res.status(200).json({ message: "Success" });
});

app.listen(PORT, () => {
    console.log(`Server l√§uft auf http://localhost:${PORT}`);
});
